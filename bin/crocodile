#! /usr/bin/env ruby

require 'optparse'
require_relative '../lib/crocodile/crocodile_process'

module Crocodile
  def self.print_help
    $stdout.puts "Usage: crocodile [-d] [-p /path/to/pids] job_name (start|schedule|stop)"
  end
end

opts = {}

OptionParser.new do |options|
  options.on("-d", "--daemonize", "Run process in background") do |d|
    opts[:daemonize] = d
  end

  options.on("-p", "--pids-dir=PIDS", "Where to store pids files") do |p|
    opts[:pids_dir] = p
  end
end.parse!

job_name = ARGV.shift
action   = ARGV.shift

unless job_name
  $stderr.puts "Must indicate a job name"
  Crocodile.print_help
  exit 1
end

unless action
  $stderr.puts "Must indicate an action"
  Crocodile.print_help
  exit 1
end

$stdout.sync = true

pids_dir = opts[:pids_dir] || File.expand_path("jobs/pids")

process = CrocodileProcess.new(job_name, pids_dir)

case action
when "start"
  if opts[:daemonize]
    process.daemonize!
  end

  $stdout.puts "Starting Job #{job_name} #{opts[:daemonize] ? "(daemonized)" : ""}"
  process.start

when "schedule"
  if opts[:daemonize]
    process.daemonize!
  end

  $stdout.puts "Scheduling Job #{job_name} #{opts[:daemonize] ? "(daemonized)" : ""}"
  process.schedule

when "stop"
  $stdout.puts "Stopping Job #{job_name}"
  if process.stop
    $stdout.puts "Stopped"
  else
    $stderr.puts "PID file not found"
  end

else
  Crocodile.print_help
  exit 2
end

at_exit do
  process.clean
end
